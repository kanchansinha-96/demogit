def call(def countValReset) {
    def envProperty = loadEnvironmentProperties()
    def counterFile = envProperty.fortify_global_counter_file
    def fortifyApiToken = envProperty.fortify_api_credential_id
    def fortifyApiURL = envProperty.fortify_api_url
    def jsonText = libraryResource('pipeline-global-config/fortify-response.json')
    def threshold = envProperty.fortify_count_threshold as Integer
    def count = 0
    
    // Get pending count from JSON file
    def jsonData = readJSON text: jsonText
    def pendingCountFromJson = jsonData.count ?: 0
    println "INFO: Pending count from JSON file: ${pendingCountFromJson}"
    
    if(fileExists(counterFile)) {
        // Read current count
        if(countValReset.equalsIgnoreCase("resetNo")) {
            def props = readFile(counterFile).readLines()
            if(props && props[0].startsWith("count-")) {
                count = props[0].split("=")[1].toInteger()
            }
            println "INFO: Current build failed count: ${count}"
            count = count + 1
        }
        
        // Update counter file
        writeFile(file: counterFile, text: "count-${count}\n")
        sh "cat ${counterFile}"
        println "INFO: Updated global count value: ${count}"
        
        // Get live pending jobs count from Fortify API
        def livePendingCount = getFortifyPendingJobsCount(fortifyApiToken, fortifyApiURL)
        
        // Check both conditions
        if(count >= threshold && pendingCountFromJson > 5) {
            println "⚠️ ALERT: Build failures (${count}) >= threshold (${threshold}) AND pending jobs (${pendingCountFromJson}) > 5"
            println "INFO: Live pending jobs in Fortify: ${livePendingCount}"
            notifyTeamsChannel()
        } else {
            println "INFO: No notification needed - count: ${count}/${threshold}, pending: ${pendingCountFromJson}/5"
        }
    } else {
        println "WARNING: Counter file not found: ${counterFile}"
    }
}

def getFortifyPendingJobsCount(def fortifyApiToken, def fortifyApiURL) {
    try {
        withCredentials([string(credentialsId: fortifyApiToken, variable: 'credentials')]) {
            def apiResponse = sh(
                script: "curl -ksH 'Authorization: FortifyToken \${credentials}' '${fortifyApiURL}'",
                returnStdout: true
            ).trim()
            
            def jsonData = readJSON text: apiResponse
            def count = jsonData.count ?: 0
            
            println "INFO: Live pending jobs count from Fortify API: ${count}"
            return count
        }
    } catch (Exception e) {
        println "ERROR: Failed to fetch Fortify pending jobs: ${e.message}"
        e.printStackTrace()
        return 0
    }
}
